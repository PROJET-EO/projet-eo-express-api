openapi: 3.0.3
info:
  version: 'latest'
  title: Projet_eo API
security:
  - BearerAuth: [ ]

paths:
  /ping:
    get:
      tags:
        - Security
      summary: pong
      operationId: ping
      security: [ ]
      description: Check server health
      responses:
        200:
          description: pong
          content:
            text/plain:
              schema:
                type: string
                example: pong
        500:
          $ref: '#/components/responses/500'
  /authInitiation:
    post:
      tags:
        - Security
      summary: Initiate an authentication process
      operationId: initiateAuth
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthInitiation'
        required: true
      responses:
        200:
          description: autheticated token
          content:
            application/json:
              schema:
                $ref: './api.yml#/components/schemas/Token'
        400:
          $ref: './api.yml#/components/responses/400'
        500:
          $ref: './api.yml#/components/responses/500'
  /token:
    post:
      tags:
        - Security
      summary: Create a new access token and corresponding refresh token
      operationId: createToken
      security: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateToken'
        required: true
      responses:
        200:
          description: The generated token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        400:
          $ref: './api.yml#/components/responses/400'
        500:
          $ref: './api.yml#/components/responses/500'
  /whoami:
    get:
      tags:
        - Security
      summary: Who Am I? Tells you who you are
      operationId: whoami
      responses:
        200:
          description: Who you are
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Whoami'
        400:
          $ref: './api.yml#/components/responses/400'
        403:
          $ref: './api.yml#/components/responses/403'
        404:
          $ref: './api.yml#/components/responses/404'
        429:
          $ref: './api.yml#/components/responses/429'
        500:
          $ref: './api.yml#/components/responses/500'

  /getProjectById:
    get:
      tags:
        - Project
      summary: Get information of a project
      operationId: getProjectById
      parameters:
        - in: path
          name: aId
          schema:
            type: string
          required: true
      responses:
        200:
          description: Information of the project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFile'
        400:
          $ref: './api.yml#/components/responses/400'
        403:
          $ref: './api.yml#/components/responses/403'
        404:
          $ref: './api.yml#/components/responses/404'
        429:
          $ref: './api.yml#/components/responses/429'
        500:
          $ref: './api.yml#/components/responses/500'
          
  /Project:
    get:
      tags:
        - Projects
      summary: get a list of project
      operationId: getProjects
      parameters:
        - in: path
          name: nameLike
          schema:
              type: string
          required: true
        - in: path
          name: uploadedAt
          schema:
            type: string
          required: true
        - in: path
          name: author
          schema:
            type: string
          required: true
        - in: path
          name: associated
          schema:
            type: string
          required: true
        - in: path
          name: issue
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
      responses:
        '200':
          description: The project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFile'
        400:
          $ref: './api.yml#/components/responses/400'
        403:
          $ref: './api.yml#/components/responses/403'
        404:
          $ref: './api.yml#/components/responses/404'
        429:
          $ref: './api.yml#/components/responses/429'
        500:
          $ref: './api.yml#/components/responses/500'
    put:
      tags:
        - Projects
      summary: Upload a Projects. Fails if project already exists.
      operationId: uploadProject
      parameters:
        - in: path
          name: aId
          schema:
            type: string
          required: true
        - in: path
          name: id
          schema:
            type: string
          required: true
        - in: query
          name: fileType
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectFile'
      responses:
        '200':
          description: The crupdated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectFile'
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'
  /getUserById:
    get:
      tags:
        - User Account
      summary: Get a user By provided Id
      operationId: getUserById
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        200:
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User1'
        400:
          $ref: './api.yml#/components/responses/400'
        403:
          $ref: './api.yml#/components/responses/403'
        404:
          $ref: './api.yml#/components/responses/404'
        429:
          $ref: './api.yml#/components/responses/429'
        500:
          $ref: './api.yml#/components/responses/500'
  /getActivities:
    get:
      summary: Get all activities of users.
      tags:
        - User Account
      operationId: getUserActivities
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
        - in: query
          name: page
          schema:
            $ref: '#/components/schemas/Page'
        - in: query
          name: pageSize
          schema:
            $ref: '#/components/schemas/PageSize'
      responses:
        200:
          description: List of all activities
          content:
            application/json:
              schema:
                type: array
                $ref : '#/components/schemas/Activities'
        400:
          $ref: './api.yml#/components/responses/400'
        403:
          $ref: './api.yml#/components/responses/403'
        404:
          $ref: './api.yml#/components/responses/404'
        429:
          $ref: './api.yml#/components/responses/429'
        500:
          $ref: './api.yml#/components/responses/500'
  /updateActivities:
    put:
      tags:
        - User Account
      summary: Update activities of an account
      operationId: updateActivities
      parameters:
        - in: path
          name: userId
          schema:
            type: string
          required: true
      requestBody:
        content:
          application/json:
            schema:
            
      responses:
        200:
          description: The account with information updated
          content:
            application/json:
              schema:
               
        400:
          $ref: '#/components/responses/400'
        403:
          $ref: '#/components/responses/403'
        404:
          $ref: '#/components/responses/404'
        429:
          $ref: '#/components/responses/429'
        500:
          $ref: '#/components/responses/500'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer

  responses:
    '400':
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BadRequestException'
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotAuthorizedException'
    '404':
      description: Not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ResourceNotFoundException'
    '429':
      description: Too many requests to the API
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TooManyRequestsException'
    '500':
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/InternalServerException'

  schemas:
    ProjectFile:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        uploadedAt:
          type: string
          format: date-time
        link:
          type: string
        uploadedByAccountId:
          type: string
          example: "uuid"

    AuthInitiation:
      type: object
      properties:
        state:
          type: string
        phone:
          type: string
    CreateToken:
      type: object
      properties:
        code:
          type: string
    Token:
      type: object
      properties:
        accessToken:
          type: string
        whoami:
          $ref: '#/components/schemas/Whoami'
    Whoami:
      type: object
      properties:
        user:
          $ref:  '#/components/schemas/User'
          
    UserIdentifier:
      type: object
      properties:
        id:
          type: string
        ref:
          type: string
          example: STD21001
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        birthdate:
          type: string
          example: "2023-05-14"
    User:
      allOf:
        - $ref: '#/components/schemas/UserIdentifier'
        - type: object
          properties:
            project:
              type: object
            friendRelation:
              type: object
    ProjectFile1:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        fileUrl:
          type: string
    User1:
      properties:
        id:
          type: string
          example: 'uuid'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Doe'
        idVerified:
          type: boolean
        projectFile1:
          type: object
          properties:
            $ref: '#/components/schemas/ProjectFile1'
        email:
          type: string
          example: "JohnDoe@example.com"
        status:
          $ref: '#/components/schemas/EnableStatus'
    EnableStatus:
      type: string
      enum:
        - ENABLED
        - DISABLED
    Account:
      properties:
        id:
          type: string
        name:
          type: string
        status:
          $ref: '#/components/schemas/AccountStatus'
    AccountStatus:
      type: string
      enum:
        - OPENED
        - CLOSED
        - SUSPENDED
    ProjectUpdate:
      allOf:
        - $ref: '#/components/schemas/ProjectFile'
      properties:
        updatedAt:
          type: string
          format: date-time
    ContactAddress:
      type: object
      properties:
        city:
          type: string
    Page:
      type: integer
      description: Start at `1`
    PageSize:
      type: integer
      description: Cannot exceed `500`
    CourseDirection:
      type: string
      enum:
        - ASC
        - DESC
    Activities:
      properties:
        
          
    Exception:
      type: object
      properties:
        type:
          type: string
        message:
          type: string
    BadRequestException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: BadRequestException
        message: Bad request
    NotAuthorizedException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: NotAuthorizedException
        message: Not authorized
    ResourceNotFoundException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: ResourceNotFoundException
        message: Resource of type <T> identified by <I> not found
    TooManyRequestsException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: TooManyRequestsException
        message: Too many requests
    InternalServerException:
      allOf:
        - $ref: '#/components/schemas/Exception'
      example:
        type: InternalServerException
        message: Unexpected error